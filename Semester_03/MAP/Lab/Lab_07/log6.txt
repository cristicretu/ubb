PrgState{
id=5,
 exeStack=[(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5))))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[Ref(Int) v, (NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[Ref(Int) v, (NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))],
 symTable={},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))],
 symTable={v=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))],
 symTable={v=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[NewStmt(v, 20), (Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5))))],
 symTable={v=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[NewStmt(v, 20), (Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5))))],
 symTable={v=RefValue(0, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=5,
 exeStack=[(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5))))],
 symTable={v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5))))],
 symTable={v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[Ref(Ref(Int)) a, (NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))],
 symTable={v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[Ref(Ref(Int)) a, (NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))],
 symTable={v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))],
 symTable={a=RefValue(0, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))],
 symTable={a=RefValue(0, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[NewStmt(a, v), (print(RefExp(v));print(RefExp(RefExp(a)) + 5))],
 symTable={a=RefValue(0, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[NewStmt(a, v), (print(RefExp(v));print(RefExp(RefExp(a)) + 5))],
 symTable={a=RefValue(0, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20

}
PrgState{
id=5,
 exeStack=[(print(RefExp(v));print(RefExp(RefExp(a)) + 5))],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[(print(RefExp(v));print(RefExp(RefExp(a)) + 5))],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[print(RefExp(v)), print(RefExp(RefExp(a)) + 5)],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[print(RefExp(v)), print(RefExp(RefExp(a)) + 5)],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[print(RefExp(RefExp(a)) + 5)],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[20],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[print(RefExp(RefExp(a)) + 5)],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[20],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[20, 25],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[20, 25],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=5,
 exeStack=[],
 symTable={a=RefValue(2, Ref(Int)), v=RefValue(1, Int)},
 output=[20, 25],
 originalProgram=(Ref(Int) v;(NewStmt(v, 20);(Ref(Ref(Int)) a;(NewStmt(a, v);(print(RefExp(v));print(RefExp(RefExp(a)) + 5)))))),
 fileTable={},
 heap=1 -> 20
2 -> RefValue(1, Int)

}
PrgState{
id=0,
 exeStack=[(Int v;(v = 4;(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v))))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[Int v, (v = 4;(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v)))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[Int v, (v = 4;(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v)))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(v = 4;(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v)))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(v = 4;(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v)))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = 4, (while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = 4, (while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v))],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) };print(v))],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@58ea8fce) { (print(v);v = v - 1) }, print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@3fea2e9) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(Int v;(v = 4;(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v))))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[Int v, (v = 4;(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v)))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[Int v, (v = 4;(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v)))],
 symTable={},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(v = 4;(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v)))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(v = 4;(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v)))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = 4, (while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = 4, (while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v))],
 symTable={v=0},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v))],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) };print(v))],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=4},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=3},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=2},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[(print(v);v = v - 1), while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v), v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[v = v - 1, while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=1},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[while(model.exp.RelExp@63daf17c) { (print(v);v = v - 1) }, print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[print(v)],
 symTable={v=0},
 output=[4, 3, 2, 1],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
PrgState{
id=0,
 exeStack=[],
 symTable={v=0},
 output=[4, 3, 2, 1, 0],
 originalProgram=(Int v;(v = 4;(while(model.exp.RelExp@4e50679f) { (print(v);v = v - 1) };print(v)))),
 fileTable={},
 heap=(the heap is empty)

}
